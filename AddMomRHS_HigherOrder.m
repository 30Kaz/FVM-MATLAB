function HOterm=AddMomRHS_HigherOrder(Mesh,Field)
    %{
      - chap 11.7-11.8
      - QUICK scheme
      - boudary treatment
        walls:              nothing needed
        specific velocity:  nothing needed, as both velocity and mass flux
                            are available so no extrapolation needed
                            -> same as 1st order upwind
        specific pressure:  ??? Haven't even understood original upwind
        ->>so, implementation only  for interior elements are calculated
    %}
    HOterm=zeros(Mesh.element.number,Mesh.Dimension);
    
    for i=Mesh.face.boundarynum+1:Mesh.face.number
        for k=1:Mesh.Dimension
        HOterm(Mesh.face.owner(i,1),k)...
       =-max(Field.face.flux(i),0)*(1/2)...
        *dot(...
             Field.element.velocitygrad(Mesh.face.owner(i,1),3*k-2:3*k)+Field.face.velocitygrad(i,3*k-2:3*k)...
            ,Mesh.face.dCf(i)*Mesh.face.ecf(i,:)...
            )...
        -max(-Field.face.flux(i),0)*(1/2)...
        *dot(...
             Field.element.velocitygrad(Mesh.face.owner(i,2),3*k-2:3*k)+Field.face.velocitygrad(i,3*k-2:3*k)...
            ,-Mesh.face.dCf(i)*Mesh.face.ecf(i,:)...
            );
        
        HOterm(Mesh.face.owner(i,2),k)...
       =max(Field.face.flux(i),0)*(1/2)...
        *dot(...
             Field.element.velocitygrad(Mesh.face.owner(i,1),3*k-2:3*k)+Field.face.velocitygrad(i,3*k-2:3*k)...
            ,Mesh.face.dCf(i)*Mesh.face.ecf(i,:)...
            )...
        +max(-Field.face.flux(i),0)*(1/2)...
        *dot(...
             Field.element.velocitygrad(Mesh.face.owner(i,2),3*k-2:3*k)+Field.face.velocitygrad(i,3*k-2:3*k)...
            ,-Mesh.face.dCf(i)*Mesh.face.ecf(i,:)...
            );
        end
    end
end