function facegrad=InterpolateGrad(Mesh,Field,Type)
    %{
    - Interior: eq(9.33)
    - Boundary: extension of (9.33), but (15.140) for velocity in specific pressure
    %}

    boundaryface=1:Mesh.face.boundarynum;
    interiorface=Mesh.face.boundarynum+1:Mesh.face.number;
    
    switch Type
        case 'pressure'
            facegrad=zeros(Mesh.face.number,3);
            %Interior faces
            facegrad(interiorface,:)=Mesh.face.gcf(interiorface,1).*Field.element.pressuregrad(Mesh.face.owner(interiorface,1),:)...
                                    +Mesh.face.gcf(interiorface,2).*Field.element.pressuregrad(Mesh.face.owner(interiorface,2),:);      %Linear interpolation
            facegrad(interiorface,:)=facegrad(interiorface,:)...
                                    +(...
                                        (Field.element.pressure(Mesh.face.owner(interiorface,2))-Field.element.pressure(Mesh.face.owner(interiorface,1)))./Mesh.face.dCF(interiorface)...
                                        -sum(facegrad(interiorface,:).*Mesh.face.ecf(interiorface,:),2)...
                                     ).*Mesh.face.ecf(interiorface,:);
            %Boundary faces
            facegrad(boundaryface,:)=Field.element.pressuregrad(Mesh.face.owner(boundaryface,1),:)...
                                    +(...
                                      (...
                                       Field.face.pressure(boundaryface)-Field.element.pressure(Mesh.face.owner(boundaryface,1))...
                                      )./Mesh.face.dCF(boundaryface)...
                                      -sum(Field.element.pressuregrad(Mesh.face.owner(boundaryface,1),:).*Mesh.face.ecf(boundaryface,:),2)...
                                     )...
                                    .*Mesh.face.ecf(boundaryface,:);
            
        case 'velocity'
            facegrad=zeros(Mesh.face.number,9);
            %Interior faces
            for k=1:Mesh.Dimension
                facegrad(interiorface,3*k-2:3*k)=Mesh.face.gcf(interiorface,1).*Field.element.velocitygrad(Mesh.face.owner(interiorface,1),3*k-2:3*k)...
                                                +Mesh.face.gcf(interiorface,2).*Field.element.velocitygrad(Mesh.face.owner(interiorface,2),3*k-2:3*k);   %Linear interpolation
                facegrad(interiorface,3*k-2:3*k)=facegrad(interiorface,3*k-2:3*k)...
                                              +(...
                                               (...
                                                Field.element.velocity(Mesh.face.owner(interiorface,2),k)-Field.element.velocity(Mesh.face.owner(interiorface,1),k)...
                                               )./Mesh.face.dCF(interiorface)...
                                               -sum(facegrad(interiorface,3*k-2:3*k).*Mesh.face.ecf(interiorface,:),2)...
                                               ).*Mesh.face.ecf(interiorface,:);
            end
            %Boundary faces
            for i=1:Mesh.face.boundarynum
                switch Mesh.face.boundarycondition(i,1)
                    case 1      %Specific pressure, (15.140)
                        for k=1:Mesh.Dimension
                            facegrad(i,3*k-2:3*k)=Field.element.velocitygrad(Mesh.face.owner(i,1),3*k-2:3*k)...
                                           -dot(Field.element.velocitygrad(Mesh.face.owner(i,1),3*k-2:3*k),...
                                                Mesh.face.Sf(i,:)/Mesh.face.area(i))...
                                           *Mesh.face.Sf(i,:)/Mesh.face.area(i);
                        end
                    case {2,3}  %Specific velocity, No slip wall
                        for k=1:Mesh.Dimension
                            facegrad(i,3*k-2:3*k)...
                           =Field.element.velocitygrad(Mesh.face.owner(i,1),3*k-2:3*k)...
                          +(...
                            (...
                             Field.face.velocity(i,k)-Field.element.velocity(Mesh.face.owner(i,1),k)...
                            )./Mesh.face.dCF(i)...
                            -sum(Field.element.velocitygrad(Mesh.face.owner(i,1),3*k-2:3*k).*Mesh.face.ecf(i,:),2)...
                           ).*Mesh.face.ecf(i,:);
                        end
                    otherwise
                        disp('Undefined Boundary Condition in InterpolateGrad.m');
                end
            end
            
        case 'pressure correction'
            facegrad=zeros(Mesh.face.number,3);
            %Interior faces
            facegrad(interiorface,:)=Mesh.face.gcf(interiorface,1).*Field.element.PCorrectgrad(Mesh.face.owner(interiorface,1),:)...
                                    +Mesh.face.gcf(interiorface,2).*Field.element.PCorrectgrad(Mesh.face.owner(interiorface,2),:);      %Linear interpolation
            facegrad(interiorface,:)=facegrad(interiorface,:)...
                                    +(...
                                        (Field.element.PCorrect(Mesh.face.owner(interiorface,2))-Field.element.PCorrect(Mesh.face.owner(interiorface,1)))./Mesh.face.dCF(interiorface)...
                                        -sum(facegrad(interiorface,:).*Mesh.face.ecf(interiorface,:),2)...
                                     ).*Mesh.face.ecf(interiorface,:);
            %Boundary faces
            facegrad(boundaryface,:)=Field.element.PCorrectgrad(Mesh.face.owner(boundaryface,1),:)...
                                    +(...
                                      (...
                                       Field.face.PCorrect(boundaryface)-Field.element.PCorrect(Mesh.face.owner(boundaryface,1))...
                                      )./Mesh.face.dCF(boundaryface)...
                                      -sum(Field.element.PCorrectgrad(Mesh.face.owner(boundaryface,1),:).*Mesh.face.ecf(boundaryface,:),2)...
                                     )...
                                     .*Mesh.face.ecf(boundaryface,:);
    end
end